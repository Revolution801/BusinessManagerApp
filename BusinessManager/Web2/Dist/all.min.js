/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(11);
	__webpack_require__(15);
	__webpack_require__(13);
	__webpack_require__(10);
	__webpack_require__(12);
	__webpack_require__(14);
	__webpack_require__(20);
	__webpack_require__(8);
	__webpack_require__(16);
	__webpack_require__(19);
	__webpack_require__(17);
	__webpack_require__(18);
	__webpack_require__(9);
	__webpack_require__(21);
	__webpack_require__(3);
	__webpack_require__(5);
	__webpack_require__(2);
	__webpack_require__(6);
	__webpack_require__(7);
	module.exports = __webpack_require__(4);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var loggedinUser_service_1 = __webpack_require__(2);
	var httpExecute_service_1 = __webpack_require__(3);
	var url_service_1 = __webpack_require__(4);
	var localUrl_service_1 = __webpack_require__(5);
	var login_service_1 = __webpack_require__(6);
	var message_service_1 = __webpack_require__(7);
	var navigation_controller_1 = __webpack_require__(8);
	var register_controller_1 = __webpack_require__(9);
	var allowance_controller_1 = __webpack_require__(10);
	var home_controller_1 = __webpack_require__(12);
	var admin_controller_1 = __webpack_require__(13);
	var login_controller_1 = __webpack_require__(14);
	var address_controller_1 = __webpack_require__(15);
	var purchase_address_controller_1 = __webpack_require__(16);
	var purchase_names_controller_1 = __webpack_require__(17);
	var purchase_verify_controller_1 = __webpack_require__(18);
	var purchase_final_controller_1 = __webpack_require__(19);
	var manageUserCreatedBeacons_controller_1 = __webpack_require__(20);
	var app = angular.module('com.roylance.chaperapp.jsapp', [
	    "ngRoute"
	]);
	var localUrlService = new localUrl_service_1.LocalUrlService();
	var loginControllerName = "loginController";
	var homeControllerName = "homeController";
	var allowanceControllerName = "allowanceController";
	var registerControllerName = "registerController";
	var adminControllerName = "adminController";
	var navigationControllerName = "navigationController";
	var addressControllerName = "addressController";
	var purchaseAddressControllerName = "purchaseAddressController";
	var purchaseNamesControllerName = "purchaseNamesController";
	var purchaseVerifyControllerName = "purchaseVerifyController";
	var purchaseFinalControllerName = "purchaseFinalController";
	var manageUserCreatedBeaconsControllerName = "manageUserCreatedBeaconsController";
	app.config(function ($routeProvider) {
	    $routeProvider
	        .when(localUrlService.login, {
	        templateUrl: "Home/Login",
	        controller: loginControllerName
	    })
	        .when(localUrlService.home, {
	        templateUrl: "Home/Home",
	        controller: homeControllerName
	    })
	        .when(localUrlService.allowance, {
	        templateUrl: "Home/Allowance",
	        controller: allowanceControllerName
	    })
	        .when(localUrlService.register, {
	        templateUrl: "Home/Register",
	        controller: registerControllerName
	    })
	        .when(localUrlService.admin, {
	        templateUrl: "Home/Admin",
	        controller: adminControllerName
	    })
	        .when(localUrlService.address, {
	        templateUrl: "Home/Address",
	        controller: addressControllerName
	    })
	        .when(localUrlService.purchaseAddress, {
	        templateUrl: "Home/PurchaseAddress",
	        controller: purchaseAddressControllerName
	    })
	        .when(localUrlService.purchaseNames, {
	        templateUrl: "Home/PurchaseNames",
	        controller: purchaseNamesControllerName
	    })
	        .when(localUrlService.purchaseVerify, {
	        templateUrl: "Home/PurchaseVerify",
	        controller: purchaseVerifyControllerName
	    })
	        .when(localUrlService.purchaseFinal, {
	        templateUrl: "Home/PurchaseFinal",
	        controller: purchaseFinalControllerName
	    })
	        .when(localUrlService.manageUserCreatedBeacons, {
	        templateUrl: "Home/ManageUserCreatedBeacons",
	        controller: manageUserCreatedBeaconsControllerName
	    })
	        .otherwise({
	        redirectTo: localUrlService.home
	    });
	});
	app.factory("urlService", function ($window) {
	    return new url_service_1.UrlService($window);
	});
	app.factory("localUrlService", function () {
	    return new localUrl_service_1.LocalUrlService();
	});
	app.factory("loggedInUserService", function ($http, urlService, localUrlService, $window) {
	    return new loggedinUser_service_1.LoggedInUserService($http, urlService, localUrlService, $window);
	});
	app.factory("httpExecuteService", function ($http, loggedInUserService) {
	    return new httpExecute_service_1.HttpExecuteService($http, loggedInUserService);
	});
	app.factory("messageService", function () {
	    return new message_service_1.MessageService();
	});
	app.factory("loginService", function ($http, urlService, loggedInUserService, httpExecuteService, messageService) {
	    return new login_service_1.LoginService($http, urlService, loggedInUserService, httpExecuteService, messageService);
	});
	app.controller(navigationControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, httpExecuteService) {
	        $scope.i = new navigation_controller_1.NavigationController(loggedInUserService, $window, localUrlService, httpExecuteService, urlService);
	    }]);
	app.controller(registerControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService) {
	        $scope.i = new register_controller_1.RegisterController(loginService, loggedInUserService, $window.location, localUrlService, messageService);
	    }]);
	app.controller(loginControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService) {
	        $scope.i = new login_controller_1.LoginController(loginService, loggedInUserService, $window, localUrlService, messageService);
	    }]);
	app.controller(allowanceControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new allowance_controller_1.AllowanceController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(homeControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new home_controller_1.HomeController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(adminControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new admin_controller_1.AdminController(httpExecuteService, urlService, messageService, loggedInUserService, localUrlService, $window);
	    }]);
	app.controller(addressControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new address_controller_1.AddressController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(purchaseAddressControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new purchase_address_controller_1.PurchaseAddressController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(purchaseNamesControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new purchase_names_controller_1.PurchaseNamesController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(purchaseVerifyControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new purchase_verify_controller_1.PurchaseVerifyController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(purchaseFinalControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new purchase_final_controller_1.PurchaseFinalController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);
	app.controller(manageUserCreatedBeaconsControllerName, ['$scope', '$http', '$log', '$window', 'loggedInUserService', 'urlService', 'localUrlService', 'loginService', 'messageService', 'httpExecuteService',
	    function ($scope, $http, $log, $window, loggedInUserService, urlService, localUrlService, loginService, messageService, httpExecuteService) {
	        $scope.i = new manageUserCreatedBeacons_controller_1.ManageUserCreatedBeaconsController(loginService, loggedInUserService, $window, localUrlService, messageService, httpExecuteService, urlService);
	    }]);


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	var LoggedInUserService = (function () {
	    function LoggedInUserService($http, urlService, localUrlService, window) {
	        this.accessTokenName = "com.roylance.chaperapp.accessToken";
	        this.userNameName = "com.roylance.chaperapp.userName";
	        this.userIdName = "com.roylance.chaperapp.userId";
	        this.isAdminName = "com.roylance.chaperapp.isAdmin";
	        this.http = $http;
	        this.urlService = urlService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        if (localStorage[this.accessTokenName]) {
	            this.accessToken = localStorage[this.accessTokenName];
	        }
	        if (this.accessToken) {
	            var self_1 = this;
	            this.http({
	                method: "POST",
	                url: urlService.isLoggedInUrl,
	                headers: { "Authorization": "Bearer " + this.accessToken }
	            }).success(function (data) {
	                if (data === true) {
	                    if (localStorage[self_1.userNameName]) {
	                        self_1.userName = localStorage[self_1.userNameName];
	                    }
	                    if (localStorage[self_1.userIdName]) {
	                        self_1.userId = localStorage[self_1.userIdName];
	                    }
	                    if (localStorage[self_1.isAdminName]) {
	                        self_1.isAdmin = localStorage[self_1.isAdminName];
	                    }
	                    self_1.window.location.href = "#" + self_1.localUrlService.home;
	                    return;
	                }
	                self_1.clearValues();
	                self_1.window.location.href = "#" + self_1.localUrlService.login;
	            }).error(function (data) {
	                self_1.window.location.href = "#" + self_1.localUrlService.login;
	                self_1.clearValues();
	            });
	        }
	        this.purchaseBeaconViewModel = {};
	    }
	    LoggedInUserService.prototype.clearValues = function () {
	        this.accessToken = "";
	        this.userName = "";
	        this.userId = null;
	        this.isAdmin = false;
	        this.deviceToken = "";
	        this.purchaseBeaconViewModel = {};
	        localStorage.removeItem(this.accessTokenName);
	        localStorage.removeItem(this.userNameName);
	        localStorage.removeItem(this.userIdName);
	        localStorage.removeItem(this.isAdminName);
	    };
	    LoggedInUserService.prototype.addValue = function (userName, accessToken, userId) {
	        this.userName = userName;
	        this.accessToken = accessToken;
	        this.userId = userId;
	        localStorage[this.userNameName] = userName;
	        localStorage[this.userIdName] = userId;
	        localStorage[this.accessTokenName] = accessToken;
	    };
	    LoggedInUserService.prototype.setIsAdmin = function (value) {
	        this.isAdmin = value;
	        localStorage[this.isAdminName] = value;
	    };
	    LoggedInUserService.prototype.logout = function () {
	        this.clearValues();
	    };
	    return LoggedInUserService;
	}());
	exports.LoggedInUserService = LoggedInUserService;


/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	var HttpExecuteService = (function () {
	    function HttpExecuteService(http, loggedInUserService) {
	        this.http = http;
	        this.loggedInUserService = loggedInUserService;
	    }
	    HttpExecuteService.prototype.performGet = function (url, onSuccess, onError) {
	        this.http(this.buildGetHeaders(url))
	            .success(function (data) {
	            onSuccess(data);
	        })
	            .error(function (data) {
	            onError(data);
	        });
	    };
	    HttpExecuteService.prototype.performPost = function (url, data, onSuccess, onError) {
	        this.http(this.buildPostHeaders(url, data))
	            .success(function (data) {
	            onSuccess(data);
	        })
	            .error(function (data) {
	            onError(data);
	        });
	    };
	    HttpExecuteService.prototype.buildGetHeaders = function (url) {
	        return {
	            method: "GET",
	            url: url,
	            headers: { "Authorization": "Bearer " + this.loggedInUserService.accessToken }
	        };
	    };
	    HttpExecuteService.prototype.buildPostHeaders = function (url, data) {
	        return {
	            method: "POST",
	            url: url,
	            headers: { "Authorization": "Bearer " + this.loggedInUserService.accessToken },
	            data: data
	        };
	    };
	    return HttpExecuteService;
	}());
	exports.HttpExecuteService = HttpExecuteService;


/***/ },
/* 4 */
/***/ function(module, exports) {

	"use strict";
	var UrlService = (function () {
	    function UrlService(window) {
	        this.loginUrl = window.location.pathname + "Token";
	        this.changePasswordUrl = window.location.pathname + "api/Account/ChangePassword";
	        this.forgotPasswordUrl = window.location.pathname + "api/Account/ForgotPassword";
	        this.logoutUrl = window.location.pathname + "api/Account/Logout";
	        this.registerUrl = window.location.pathname + "api/Account/Register";
	        this.setPasswordUrl = window.location.pathname + "api/Account/setPassword";
	        this.userInfoUrl = window.location.pathname + "api/Account/UserInfo";
	        this.getUserInformationsUrl = window.location.pathname + "api/UserInformation";
	        this.setAdminUrl = window.location.pathname + "api/Admin/SetPassword";
	        this.isAdminUrl = window.location.pathname + "api/Admin/IsAdmin";
	        this.updateProfileUrl = window.location.pathname + "api/Account/UpdateProfile";
	        this.getUserProfileUrl = window.location.pathname + "api/UserInformation/Profile";
	        this.deleteUserUrl = window.location.pathname + "api/Admin/DeleteUser";
	        this.allocateBeaconsUrl = window.location.pathname + "api/Admin/AllocateBeacons";
	        this.beaconCountUrl = window.location.pathname + "api/Admin/BeaconCount";
	        this.canCreateBeaconUrl = window.location.pathname + "api/UserCreatedBeacon/CanCreate";
	        this.getUserCreatedBeaconsUrl = window.location.pathname + "api/UserCreatedBeacon";
	        this.saveUserCreatedBeaconsUrl = window.location.pathname + "api/UserCreatedBeacon/Save";
	        this.deleteUserCreatedBeaconsUrl = window.location.pathname + "api/UserCreatedBeacon/Delete";
	        this.searchUsersUrl = window.location.pathname + "api/UserAllowance/Investigate";
	        this.getAllowancesUrl = window.location.pathname + "api/UserAllowance";
	        this.requestAllowanceUrl = window.location.pathname + "api/UserAllowance/Request";
	        this.allowAllowanceUrl = window.location.pathname + "api/UserAllowance/Allow";
	        this.revokeAllowanceUrl = window.location.pathname + "api/UserAllowance/Revoked";
	        this.validateAddressUrl = window.location.pathname + "api/UserAddress/Validate";
	        this.paymentTokenUrl = window.location.pathname + "api/Payment/Token";
	        this.paymentCheckoutUrl = window.location.pathname + "Checkout";
	        this.isLoggedInUrl = window.location.pathname + "api/Account/IsLoggedIn";
	        this.getAllUserCreatedBeaconsUrl = window.location.pathname + "api/Admin/UserCreatedBeacons";
	        this.updateBeaconStatusShippedUrl = window.location.pathname + "api/Admin/UpdateBeaconStatusShipped";
	    }
	    return UrlService;
	}());
	exports.UrlService = UrlService;


/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	var LocalUrlService = (function () {
	    function LocalUrlService() {
	        this.login = "/login";
	        this.register = "/register";
	        this.admin = "/admin";
	        this.home = "/home";
	        this.allowance = "/allowance";
	        this.address = "/address";
	        this.purchaseAddress = "/purchaseAddress";
	        this.purchaseNames = "/purchaseNames";
	        this.purchaseVerify = "/purchaseVerify";
	        this.purchaseFinal = "/purchaseFinal";
	        this.manageUserCreatedBeacons = "/manageUserCreatedBeacons";
	    }
	    return LocalUrlService;
	}());
	exports.LocalUrlService = LocalUrlService;


/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	var LoginService = (function () {
	    function LoginService(http, urlService, loggedInUserService, httpExecuteService, messageService) {
	        this.http = http;
	        this.urlService = urlService;
	        this.loggedInUserService = loggedInUserService;
	        this.httpExecuteService = httpExecuteService;
	        this.messageService = messageService;
	    }
	    LoginService.prototype.login = function (userName, password, callback) {
	        var self = this;
	        this.http({
	            method: "POST",
	            url: this.urlService.loginUrl,
	            headers: { "Content-Type": "application/x-www-form-urlencoded" },
	            transformRequest: function (obj) {
	                var str = [];
	                for (var p in obj)
	                    str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
	                return str.join("&");
	            },
	            data: {
	                grant_type: "password",
	                username: userName,
	                password: password
	            }
	        })
	            .success(function (data) {
	            console.log("successful!");
	            var errorWrapper = {
	                errorMessage: "",
	                content: null
	            };
	            if (data.userName && data.access_token) {
	                self.loggedInUserService.addValue(userName, data.access_token, 0);
	                self.checkIfAdmin(function (data) { }, function (data) { });
	                callback(errorWrapper);
	            }
	            else {
	                errorWrapper.errorMessage = self.messageService.errorMessage;
	                callback(errorWrapper);
	            }
	        })
	            .error(function (data) {
	            var errorWrapper = {
	                errorMessage: data,
	                content: null
	            };
	            callback(errorWrapper);
	        });
	    };
	    LoginService.prototype.register = function (registerModel, callback) {
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.registerUrl, registerModel, function (data) {
	            self.login(registerModel.userName, registerModel.password, function (data) {
	                var errorWrapper = {};
	                callback(errorWrapper);
	            });
	        }, function (data) {
	            var errorWrapper = {
	                errorMessage: data
	            };
	            callback(errorWrapper);
	        });
	    };
	    LoginService.prototype.checkIfAdmin = function (onSuccess, onError) {
	        var self = this;
	        self.httpExecuteService.performGet(self.urlService.isAdminUrl, function (result) {
	            self.loggedInUserService.setIsAdmin(result);
	        }, function (result) {
	            self.loggedInUserService.setIsAdmin(false);
	        });
	    };
	    return LoginService;
	}());
	exports.LoginService = LoginService;


/***/ },
/* 7 */
/***/ function(module, exports) {

	"use strict";
	var MessageService = (function () {
	    function MessageService() {
	        this.loadingMessage = "loading...";
	        this.sendingDataMessage = "sending data...";
	        this.updateSuccessful = "update successful";
	        this.errorMessage = "error processing request";
	    }
	    return MessageService;
	}());
	exports.MessageService = MessageService;


/***/ },
/* 8 */
/***/ function(module, exports) {

	"use strict";
	var NavigationController = (function () {
	    function NavigationController(loggedinUserService, window, localUrlService, httpExecuteService, urlService) {
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	    }
	    NavigationController.prototype.logout = function () {
	        this.loggedinUserService.clearValues();
	        this.window.location.href = "#" + this.localUrlService.login;
	        this.httpExecuteService.performPost(this.urlService.logoutUrl, {}, function (data) { }, function (data) { });
	    };
	    return NavigationController;
	}());
	exports.NavigationController = NavigationController;


/***/ },
/* 9 */
/***/ function(module, exports) {

	"use strict";
	var RegisterController = (function () {
	    function RegisterController(loginService, loggedinUserService, window, localUrlService, messageService) {
	        this.password = "";
	        this.confirmPassword = "";
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	    }
	    RegisterController.prototype.cannotRegister = function () {
	        var samePasswords = this.password.localeCompare(this.confirmPassword);
	        return !(this.userName &&
	            this.display &&
	            this.password &&
	            this.confirmPassword &&
	            samePasswords === 0 &&
	            !this.registering);
	    };
	    RegisterController.prototype.register = function () {
	        this.registering = true;
	        var registerModel = {
	            userName: this.userName,
	            password: this.password,
	            confirmPassword: this.confirmPassword,
	            display: this.display
	        };
	        var self = this;
	        this.loginService.register(registerModel, function (returnModel) {
	            if (!returnModel.errorMessage) {
	                self.window.location.href = "#" + self.localUrlService.home;
	            }
	            else {
	                self.errorMessage = returnModel.errorMessage;
	            }
	        });
	    };
	    return RegisterController;
	}());
	exports.RegisterController = RegisterController;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var AllowanceController = (function () {
	    function AllowanceController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.allowed = all_models_1.UserAllowanceStates.allowed;
	        this.revoked = all_models_1.UserAllowanceStates.revoked;
	        this.requested = all_models_1.UserAllowanceStates.requested;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            this.window.location.href = "#" + this.localUrlService.login;
	        }
	        else {
	            this.currentUserName = loggedinUserService.userName;
	            this.getAllowances();
	        }
	    }
	    AllowanceController.prototype.searchedUserChange = function () {
	        this.canRequestFromSelectedUser = false;
	        this.canAllowFromSelectedUser = false;
	        this.canRevokeFromSelectedUser = false;
	        if (!this.selectedUser) {
	            return;
	        }
	        this.canRequestFromSelectedUser = true;
	        this.canAllowFromSelectedUser = true;
	        this.canRevokeFromSelectedUser = true;
	        for (var idx in this.allowancesFromOthers) {
	            if (this.allowancesFromOthers[idx].fromUserId == this.selectedUser.id) {
	                this.canRequestFromSelectedUser = false;
	            }
	        }
	        for (var idx in this.allowancesForOthers) {
	            if (this.allowancesForOthers[idx].toUserId == this.selectedUser.id) {
	                if (this.allowancesForOthers[idx].status.toLowerCase() == all_models_1.UserAllowanceStates.allowed) {
	                    this.canAllowFromSelectedUser = false;
	                }
	                else if (this.allowancesForOthers[idx].status.toLowerCase() == all_models_1.UserAllowanceStates.revoked) {
	                    this.canRevokeFromSelectedUser = false;
	                }
	            }
	        }
	    };
	    AllowanceController.prototype.getAllowances = function () {
	        this.isDoingWork = true;
	        this.allowancesForOthers = [];
	        this.allowancesFromOthers = [];
	        var self = this;
	        this.httpExecuteService.performGet(this.urlService.getAllowancesUrl, function (data) {
	            for (var idx in data) {
	                var allowance = data[idx];
	                if (allowance.fromUserName == self.currentUserName) {
	                    self.allowancesForOthers.push(allowance);
	                }
	                else {
	                    self.allowancesFromOthers.push(allowance);
	                }
	            }
	            self.searchedUserChange();
	            self.isDoingWork = false;
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    AllowanceController.prototype.search = function () {
	        if (!this.searchName) {
	            return;
	        }
	        this.isDoingWork = true;
	        this.selectedUser = null;
	        this.searchedUsers = [];
	        var model = {
	            criteria: this.searchName
	        };
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.searchUsersUrl, model, function (data) {
	            self.searchedUsers = data;
	            if (self.searchedUsers.length > 0) {
	                self.selectedUser = self.searchedUsers[0];
	            }
	            self.searchedUserChange();
	            self.isDoingWork = false;
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    AllowanceController.prototype.handleAllowance = function (actionUrl) {
	        if (!this.selectedUser || !actionUrl) {
	            return;
	        }
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(actionUrl + "/" + this.selectedUser.id, {}, function (data) {
	            self.getAllowances();
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    AllowanceController.prototype.handleUpdateAllowance = function (actionUrl, userId) {
	        if (!userId || !actionUrl) {
	            return;
	        }
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(actionUrl + "/" + userId, {}, function (data) {
	            self.getAllowances();
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    return AllowanceController;
	}());
	exports.AllowanceController = AllowanceController;


/***/ },
/* 11 */
/***/ function(module, exports) {

	"use strict";
	var UserAllowanceStates = (function () {
	    function UserAllowanceStates() {
	    }
	    UserAllowanceStates.requested = "requested";
	    UserAllowanceStates.allowed = "allowed";
	    UserAllowanceStates.revoked = "revoked";
	    return UserAllowanceStates;
	}());
	exports.UserAllowanceStates = UserAllowanceStates;
	var AddressInformation = (function () {
	    function AddressInformation() {
	    }
	    AddressInformation.states = ["AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE", "DC", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MH", "MA", "MI", "FM", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "MP", "OH", "OK", "OR", "PW", "PA", "PR", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "VI", "WA", "WV", "WI", "WY"];
	    return AddressInformation;
	}());
	exports.AddressInformation = AddressInformation;
	var PaymentTypes = (function () {
	    function PaymentTypes() {
	    }
	    PaymentTypes.paypal = "PayPal";
	    PaymentTypes.applePay = "ApplePay";
	    PaymentTypes.googlePay = "GooglePay";
	    PaymentTypes.basePrice = 39.99;
	    PaymentTypes.baseShipping = 7.99;
	    return PaymentTypes;
	}());
	exports.PaymentTypes = PaymentTypes;
	var NewBeaconModel = (function () {
	    function NewBeaconModel() {
	    }
	    return NewBeaconModel;
	}());
	exports.NewBeaconModel = NewBeaconModel;


/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	var HomeController = (function () {
	    function HomeController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            this.window.location.href = "#" + this.localUrlService.login;
	        }
	        else {
	            this.getUserCreatedBeacons();
	        }
	    }
	    HomeController.prototype.onChange = function () {
	        this.messages = "";
	        this.selectedBeaconStatus = null;
	        if (this.loggedinUserService.userName == this.selectedUserCreatedBeacon.createdUserName &&
	            this.selectedUserCreatedBeacon.status) {
	            this.selectedBeaconStatus = this.selectedUserCreatedBeacon.status;
	        }
	    };
	    HomeController.prototype.newUserCreatedBeacon = function () {
	        this.window.location.href = "#" + this.localUrlService.purchaseAddress;
	    };
	    HomeController.prototype.saveUserCreatedBeacon = function () {
	        if (!this.selectedUserCreatedBeacon) {
	            return;
	        }
	        this.messages = this.messageService.sendingDataMessage;
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.saveUserCreatedBeaconsUrl, this.selectedUserCreatedBeacon, function (data) {
	            self.isDoingWork = false;
	            self.messages = self.messageService.updateSuccessful;
	            self.selectedUserCreatedBeacon.id = data.id;
	            self.selectedUserCreatedBeacon.beaconId = data.beaconId;
	            self.selectedUserCreatedBeacon.majorId = data.majorId;
	            self.selectedUserCreatedBeacon.minorId = data.minorId;
	        }, function (data) {
	            self.isDoingWork = false;
	            self.messages = self.messageService.errorMessage;
	            console.log(data);
	        });
	    };
	    HomeController.prototype.deleteUserCreatedBeacon = function () {
	        if (!this.selectedUserCreatedBeacon) {
	            return;
	        }
	        this.isDoingWork = true;
	        this.messages = this.messageService.sendingDataMessage;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.deleteUserCreatedBeaconsUrl + "/" + self.selectedUserCreatedBeacon.id, {}, function (data) {
	            self.messages = self.messageService.updateSuccessful;
	            self.getUserCreatedBeacons();
	        }, function (data) {
	            self.messages = self.messageService.errorMessage;
	        });
	    };
	    HomeController.prototype.getUserCreatedBeacons = function () {
	        this.isDoingWork = true;
	        this.userCreatedBeacons = [];
	        this.selectedUserCreatedBeacon = null;
	        var self = this;
	        this.httpExecuteService.performGet(this.urlService.getUserCreatedBeaconsUrl, function (data) {
	            self.isDoingWork = false;
	            self.userCreatedBeacons = data;
	            if (self.userCreatedBeacons.length > 0) {
	                self.selectedUserCreatedBeacon = self.userCreatedBeacons[0];
	                self.onChange();
	            }
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    return HomeController;
	}());
	exports.HomeController = HomeController;


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	var AdminController = (function () {
	    function AdminController(httpExecuteService, urlService, messageService, loggedInUserService, localUrlService, window) {
	        this.users = [];
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        this.messageService = messageService;
	        if (!loggedInUserService.accessToken) {
	            window.location.href = "#" + localUrlService.login;
	        }
	        else {
	            this.getBeaconTotal();
	        }
	    }
	    AdminController.prototype.setAdmin = function () {
	        if (!this.newAdmin) {
	            return;
	        }
	        this.uploadingData = true;
	        var model = {
	            userName: this.newAdmin
	        };
	        var self = this;
	        self.httpExecuteService.performPost(this.urlService.setAdminUrl, model, function (data) {
	            self.uploadingData = false;
	            self.addAdminMessage = self.messageService.updateSuccessful;
	        }, function (data) {
	            self.uploadingData = false;
	            self.addAdminMessage = self.messageService.errorMessage;
	        });
	    };
	    AdminController.prototype.getUsers = function () {
	        if (!this.changePasswordUserName ||
	            !this.changePasswordUserName) {
	            return;
	        }
	        var changePasswordModel = {
	            userName: this.changePasswordUserName,
	            password: this.changePasswordPassword
	        };
	        this.uploadingData = true;
	        var self = this;
	        self.httpExecuteService.performPost(self.urlService.changePasswordUrl, changePasswordModel, function (data) {
	            self.changePasswordMessage = self.messageService.updateSuccessful;
	            self.uploadingData = false;
	        }, function (data) {
	            self.changePasswordMessage = self.messageService.errorMessage;
	            self.uploadingData = false;
	        });
	    };
	    AdminController.prototype.getAllUsers = function () {
	        this.uploadingData = true;
	        this.users.length = 0;
	        var self = this;
	        this.httpExecuteService.performGet(this.urlService.getUserInformationsUrl, function (data) {
	            for (var key in data) {
	                self.users.push(data[key]);
	            }
	            self.uploadingData = false;
	        }, function (data) {
	            self.uploadingData = false;
	        });
	    };
	    AdminController.prototype.deleteUser = function (user) {
	        if (!user) {
	            return;
	        }
	        this.uploadingData = true;
	        var self = this;
	        var deleteUrl = self.urlService.deleteUserUrl + "/" + user.id;
	        self.httpExecuteService.performPost(deleteUrl, {}, function (data) {
	            self.getAllUsers();
	        }, function (data) {
	            self.uploadingData = false;
	        });
	    };
	    AdminController.prototype.getBeaconTotal = function () {
	        this.uploadingData = true;
	        this.beaconMessage = "Checking beacons";
	        var self = this;
	        this.httpExecuteService.performGet(this.urlService.beaconCountUrl, function (data) {
	            self.beaconMessage = "";
	            self.beaconTotal = data.beaconTotal;
	            self.userCreatedTotal = data.userCreatedTotal;
	            self.uploadingData = false;
	            self.getAllUsers();
	        }, function (data) {
	            self.beaconMessage = self.messageService.errorMessage;
	            self.uploadingData = false;
	        });
	    };
	    AdminController.prototype.allocateBeacons = function () {
	        this.uploadingData = true;
	        this.beaconMessage = "Allocating beacons";
	        var self = this;
	        self.httpExecuteService.performPost(self.urlService.allocateBeaconsUrl, {}, function (data) {
	            self.beaconMessage = "";
	            self.uploadingData = false;
	            self.getBeaconTotal();
	        }, function (data) {
	            self.beaconMessage = self.messageService.errorMessage;
	            self.uploadingData = false;
	        });
	    };
	    AdminController.prototype.setPassword = function () {
	    };
	    return AdminController;
	}());
	exports.AdminController = AdminController;


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	var LoginController = (function () {
	    function LoginController(loginService, loggedinUserService, window, localUrlService, messageService) {
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	    }
	    LoginController.prototype.login = function () {
	        if (!this.userName || !this.password) {
	            return;
	        }
	        console.log("logging in: " + this.userName);
	        this.loggingIn = true;
	        this.loggedinUserService.clearValues();
	        this.errorMessage = "";
	        var self = this;
	        this.loginService.login(this.userName, this.password, function (returnModel) {
	            self.loggingIn = false;
	            if (returnModel.errorMessage) {
	                self.errorMessage = self.messageService.errorMessage;
	            }
	            else {
	                // todo: handle state better
	                self.window.location.href = "#" + self.localUrlService.home;
	            }
	        });
	    };
	    return LoginController;
	}());
	exports.LoginController = LoginController;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var AddressController = (function () {
	    function AddressController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.states = all_models_1.AddressInformation.states;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            window.location.href = "#" + this.localUrlService.login;
	            return;
	        }
	        this.model = { country: "US" };
	    }
	    AddressController.prototype.validate = function () {
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.validateAddressUrl, this.model, function (data) {
	            console.log(data);
	            self.isDoingWork = false;
	            self.model = data;
	        }, function (data) {
	            console.log(data);
	            self.model.valid = false;
	            self.messages = self.messageService.errorMessage;
	        });
	    };
	    return AddressController;
	}());
	exports.AddressController = AddressController;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var PurchaseAddressController = (function () {
	    function PurchaseAddressController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.states = all_models_1.AddressInformation.states;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            this.window.location.href = "#" + this.localUrlService.home;
	            return;
	        }
	        if (!this.loggedinUserService.purchaseBeaconViewModel.userAddressModel) {
	            this.loggedinUserService.purchaseBeaconViewModel.userAddressModel = { country: "US" };
	        }
	    }
	    PurchaseAddressController.prototype.validate = function () {
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.validateAddressUrl, this.loggedinUserService.purchaseBeaconViewModel.userAddressModel, function (data) {
	            self.isDoingWork = false;
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel = data;
	        }, function (data) {
	            console.log(data);
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel.valid = false;
	            self.messages = self.messageService.errorMessage;
	        });
	    };
	    PurchaseAddressController.prototype.next = function () {
	        if (!this.loggedinUserService.purchaseBeaconViewModel.userAddressModel.valid) {
	            return;
	        }
	        this.messages = "";
	        this.window.location.href = "#" + this.localUrlService.purchaseNames;
	    };
	    PurchaseAddressController.prototype.cancel = function () {
	        this.messages = "";
	        this.window.location.href = "#" + this.localUrlService.home;
	    };
	    return PurchaseAddressController;
	}());
	exports.PurchaseAddressController = PurchaseAddressController;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var PurchaseNamesController = (function () {
	    function PurchaseNamesController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.states = all_models_1.AddressInformation.states;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            window.location.href = "#" + localUrlService.login;
	            return;
	        }
	        if (!this.loggedinUserService.purchaseBeaconViewModel.beaconModels ||
	            this.loggedinUserService.purchaseBeaconViewModel.beaconModels.length == 0) {
	            this.loggedinUserService.purchaseBeaconViewModel.beaconModels = [
	                { displayName: "", price: all_models_1.PaymentTypes.basePrice }
	            ];
	        }
	        this.currentShipping = all_models_1.PaymentTypes.baseShipping;
	        this.calculateTotal();
	    }
	    PurchaseNamesController.prototype.canGoNext = function () {
	        if (this.isDoingWork) {
	            return false;
	        }
	        if (this.loggedinUserService.purchaseBeaconViewModel.beaconModels.length == 0) {
	            return false;
	        }
	        for (var idx in this.loggedinUserService.purchaseBeaconViewModel.beaconModels) {
	            if (!this.loggedinUserService.purchaseBeaconViewModel.beaconModels[idx].displayName) {
	                return false;
	            }
	        }
	        return true;
	    };
	    PurchaseNamesController.prototype.calculateTotal = function () {
	        var total = 0.0;
	        for (var idx in this.loggedinUserService.purchaseBeaconViewModel.beaconModels) {
	            total = total + this.loggedinUserService.purchaseBeaconViewModel.beaconModels[idx].price;
	        }
	        this.currentTotal = Math.round((this.currentShipping + total) * 100) / 100;
	    };
	    PurchaseNamesController.prototype.newBeaconModel = function () {
	        var beaconModel = {
	            displayName: "",
	            price: all_models_1.PaymentTypes.basePrice
	        };
	        this.loggedinUserService.purchaseBeaconViewModel.beaconModels.push(beaconModel);
	        this.calculateTotal();
	    };
	    PurchaseNamesController.prototype.deleteBeaconModel = function (beaconModel) {
	        if (!beaconModel) {
	            return;
	        }
	        var foundIndex = this.loggedinUserService.purchaseBeaconViewModel.beaconModels.indexOf(beaconModel);
	        if (foundIndex > -1) {
	            this.loggedinUserService.purchaseBeaconViewModel.beaconModels.splice(foundIndex, 1);
	        }
	        this.calculateTotal();
	    };
	    PurchaseNamesController.prototype.back = function () {
	        this.window.location.href = "#" + this.localUrlService.purchaseAddress;
	    };
	    PurchaseNamesController.prototype.next = function () {
	        this.isDoingWork = true;
	        this.window.location.href = "#" + this.localUrlService.purchaseVerify;
	    };
	    PurchaseNamesController.prototype.cancel = function () {
	        this.window.location.href = "#" + this.localUrlService.home;
	    };
	    return PurchaseNamesController;
	}());
	exports.PurchaseNamesController = PurchaseNamesController;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var PurchaseVerifyController = (function () {
	    function PurchaseVerifyController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.states = all_models_1.AddressInformation.states;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            window.location.href = "#" + localUrlService.login;
	            return;
	        }
	        this.isDoingWork = false;
	        this.calculateTotal();
	        this.errorGettingToken = false;
	        this.paymentToken = null;
	        var self = this;
	        this.httpExecuteService.performGet(this.urlService.paymentTokenUrl, function (token) {
	            self.paymentToken = token;
	            braintree.setup(self.paymentToken, "dropin", {
	                container: "payment-form"
	            });
	        }, function (data) {
	            self.errorGettingToken = true;
	            console.log(data);
	        });
	    }
	    PurchaseVerifyController.prototype.calculateTotal = function () {
	        var total = 0.0;
	        for (var idx in this.loggedinUserService.purchaseBeaconViewModel.beaconModels) {
	            total = total + this.loggedinUserService.purchaseBeaconViewModel.beaconModels[idx].price;
	        }
	        this.currentTotal = Math.round((all_models_1.PaymentTypes.baseShipping + total) * 100) / 100;
	    };
	    PurchaseVerifyController.prototype.submitPayment = function () {
	        this.isDoingWork = true;
	    };
	    return PurchaseVerifyController;
	}());
	exports.PurchaseVerifyController = PurchaseVerifyController;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var all_models_1 = __webpack_require__(11);
	var PurchaseFinalController = (function () {
	    function PurchaseFinalController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.states = all_models_1.AddressInformation.states;
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            this.window.location.href = "#" + this.localUrlService.login;
	            return;
	        }
	        this.loggedinUserService.purchaseBeaconViewModel.userAddressModel = { country: "US" };
	    }
	    PurchaseFinalController.prototype.validate = function () {
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.validateAddressUrl, this.loggedinUserService.purchaseBeaconViewModel.userAddressModel, function (data) {
	            console.log(data);
	            self.isDoingWork = false;
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel = data;
	        }, function (data) {
	            console.log(data);
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel.valid = false;
	            self.messages = self.messageService.errorMessage;
	        });
	    };
	    PurchaseFinalController.prototype.next = function () {
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.validateAddressUrl, this.loggedinUserService.purchaseBeaconViewModel.userAddressModel, function (data) {
	            console.log(data);
	            self.isDoingWork = false;
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel = data;
	            if (data.valid) {
	                this.window.location.href = "#" + this.localUrlService.purchaseNames;
	            }
	        }, function (data) {
	            console.log(data);
	            self.loggedinUserService.purchaseBeaconViewModel.userAddressModel.valid = false;
	            self.messages = self.messageService.errorMessage;
	        });
	    };
	    PurchaseFinalController.prototype.cancel = function () {
	        this.window.location.href = "#" + this.localUrlService.home;
	    };
	    return PurchaseFinalController;
	}());
	exports.PurchaseFinalController = PurchaseFinalController;


/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	var ManageUserCreatedBeaconsController = (function () {
	    function ManageUserCreatedBeaconsController(loginService, loggedinUserService, window, localUrlService, messageService, httpExecuteService, urlService) {
	        this.loginService = loginService;
	        this.loggedinUserService = loggedinUserService;
	        this.window = window;
	        this.localUrlService = localUrlService;
	        this.messageService = messageService;
	        this.httpExecuteService = httpExecuteService;
	        this.urlService = urlService;
	        if (!loggedinUserService.accessToken) {
	            this.window.location.href = "#" + this.localUrlService.login;
	        }
	        else {
	            this.getStatuses();
	        }
	    }
	    ManageUserCreatedBeaconsController.prototype.getStatuses = function () {
	        this.isDoingWork = true;
	        var self = this;
	        this.statuses = [];
	        this.httpExecuteService.performGet(this.urlService.getAllUserCreatedBeaconsUrl, function (data) {
	            self.isDoingWork = false;
	            self.statuses = data;
	        }, function (data) {
	            self.isDoingWork = false;
	            console.log(data);
	        });
	    };
	    ManageUserCreatedBeaconsController.prototype.updateBeaconStatusShipped = function (status) {
	        if (!status.id || !status.trackingId) {
	            return;
	        }
	        this.isDoingWork = true;
	        var self = this;
	        this.httpExecuteService.performPost(this.urlService.updateBeaconStatusShippedUrl + "/" + encodeURIComponent(status.trackingId) + "/" + status.id, {}, function (data) {
	            self.getStatuses();
	        }, function (data) {
	            self.isDoingWork = false;
	        });
	    };
	    return ManageUserCreatedBeaconsController;
	}());
	exports.ManageUserCreatedBeaconsController = ManageUserCreatedBeaconsController;


/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";


/***/ }
/******/ ]);