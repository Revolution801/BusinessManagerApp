// generated by Proto2Typescript. do not touch!

declare module com.revolutionlandscaping.businessmanager {
	interface ProtoBufModel {
		toArrayBuffer(): ArrayBuffer;
		//toBuffer(): NodeBuffer;
		//encode(): ByteBuffer;
		toBase64(): string;
		toString(): string;
	}

	export interface ProtoBufBuilder {
		Account: AccountBuilder;
		Employee: EmployeeBuilder;
		Job: JobBuilder;
		UIBusinessManagerRequest: UIBusinessManagerRequestBuilder;
		UIBusinessManagerResponse: UIBusinessManagerResponseBuilder;
		CommonAction: CommonActionBuilder;
		MainController: MainControllerBuilder;
		
	}
}

declare module com.revolutionlandscaping.businessmanager {

	export interface Account extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		first_name?: string;
		getFirstName() : string;
		setFirstName(firstName : string): void;
		last_name?: string;
		getLastName() : string;
		setLastName(lastName : string): void;
		address?: string;
		getAddress() : string;
		setAddress(address : string): void;
		city?: string;
		getCity() : string;
		setCity(city : string): void;
		state?: string;
		getState() : string;
		setState(state : string): void;
		zip?: string;
		getZip() : string;
		setZip(zip : string): void;
		phone?: string;
		getPhone() : string;
		setPhone(phone : string): void;
		
	}
	
	export interface AccountBuilder {
		new(): Account;
		decode(buffer: ArrayBuffer) : Account;
		//decode(buffer: NodeBuffer) : Account;
		//decode(buffer: ByteArrayBuffer) : Account;
		decode64(buffer: string) : Account;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface Employee extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		first_name?: string;
		getFirstName() : string;
		setFirstName(firstName : string): void;
		last_name?: string;
		getLastName() : string;
		setLastName(lastName : string): void;
		hourly_rate?: number;
		getHourlyRate() : number;
		setHourlyRate(hourlyRate : number): void;
		
	}
	
	export interface EmployeeBuilder {
		new(): Employee;
		decode(buffer: ArrayBuffer) : Employee;
		//decode(buffer: NodeBuffer) : Employee;
		//decode(buffer: ByteArrayBuffer) : Employee;
		decode64(buffer: string) : Employee;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface Job extends ProtoBufModel {
		id?: string;
		getId() : string;
		setId(id : string): void;
		account_id?: string;
		getAccountId() : string;
		setAccountId(accountId : string): void;
		date?: string;
		getDate() : string;
		setDate(date : string): void;
		description?: string;
		getDescription() : string;
		setDescription(description : string): void;
		fixed_price?: number;
		getFixedPrice() : number;
		setFixedPrice(fixedPrice : number): void;
		hourly_rate?: number;
		getHourlyRate() : number;
		setHourlyRate(hourlyRate : number): void;
		hours?: number;
		getHours() : number;
		setHours(hours : number): void;
		
	}
	
	export interface JobBuilder {
		new(): Job;
		decode(buffer: ArrayBuffer) : Job;
		//decode(buffer: NodeBuffer) : Job;
		//decode(buffer: ByteArrayBuffer) : Job;
		decode64(buffer: string) : Job;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface UIBusinessManagerRequest extends ProtoBufModel {
		token?: string;
		getToken() : string;
		setToken(token : string): void;
		accounts: Account[];
		getAccounts() : Account[];
		setAccounts(accounts : Account[]): void;
		employees: Employee[];
		getEmployees() : Employee[];
		setEmployees(employees : Employee[]): void;
		jobs: Job[];
		getJobs() : Job[];
		setJobs(jobs : Job[]): void;
		
	}
	
	export interface UIBusinessManagerRequestBuilder {
		new(): UIBusinessManagerRequest;
		decode(buffer: ArrayBuffer) : UIBusinessManagerRequest;
		//decode(buffer: NodeBuffer) : UIBusinessManagerRequest;
		//decode(buffer: ByteArrayBuffer) : UIBusinessManagerRequest;
		decode64(buffer: string) : UIBusinessManagerRequest;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface UIBusinessManagerResponse extends ProtoBufModel {
		accounts: Account[];
		getAccounts() : Account[];
		setAccounts(accounts : Account[]): void;
		employees: Employee[];
		getEmployees() : Employee[];
		setEmployees(employees : Employee[]): void;
		jobs: Job[];
		getJobs() : Job[];
		setJobs(jobs : Job[]): void;
		
	}
	
	export interface UIBusinessManagerResponseBuilder {
		new(): UIBusinessManagerResponse;
		decode(buffer: ArrayBuffer) : UIBusinessManagerResponse;
		//decode(buffer: NodeBuffer) : UIBusinessManagerResponse;
		//decode(buffer: ByteArrayBuffer) : UIBusinessManagerResponse;
		decode64(buffer: string) : UIBusinessManagerResponse;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface CommonAction extends ProtoBufModel {
		request?: UIBusinessManagerRequest;
		getRequest() : UIBusinessManagerRequest;
		setRequest(request : UIBusinessManagerRequest): void;
		response?: UIBusinessManagerResponse;
		getResponse() : UIBusinessManagerResponse;
		setResponse(response : UIBusinessManagerResponse): void;
		
	}
	
	export interface CommonActionBuilder {
		new(): CommonAction;
		decode(buffer: ArrayBuffer) : CommonAction;
		//decode(buffer: NodeBuffer) : CommonAction;
		//decode(buffer: ByteArrayBuffer) : CommonAction;
		decode64(buffer: string) : CommonAction;
		
	}	
}

declare module com.revolutionlandscaping.businessmanager {

	export interface MainController extends ProtoBufModel {
		get_accounts?: CommonAction;
		getGetAccounts() : CommonAction;
		setGetAccounts(getAccounts : CommonAction): void;
		save_accounts?: CommonAction;
		getSaveAccounts() : CommonAction;
		setSaveAccounts(saveAccounts : CommonAction): void;
		delete_accounts?: CommonAction;
		getDeleteAccounts() : CommonAction;
		setDeleteAccounts(deleteAccounts : CommonAction): void;
		get_employees?: CommonAction;
		getGetEmployees() : CommonAction;
		setGetEmployees(getEmployees : CommonAction): void;
		save_employees?: CommonAction;
		getSaveEmployees() : CommonAction;
		setSaveEmployees(saveEmployees : CommonAction): void;
		delete_employees?: CommonAction;
		getDeleteEmployees() : CommonAction;
		setDeleteEmployees(deleteEmployees : CommonAction): void;
		get_jobs?: CommonAction;
		getGetJobs() : CommonAction;
		setGetJobs(getJobs : CommonAction): void;
		save_jobs?: CommonAction;
		getSaveJobs() : CommonAction;
		setSaveJobs(saveJobs : CommonAction): void;
		delete_jobs?: CommonAction;
		getDeleteJobs() : CommonAction;
		setDeleteJobs(deleteJobs : CommonAction): void;
		
	}
	
	export interface MainControllerBuilder {
		new(): MainController;
		decode(buffer: ArrayBuffer) : MainController;
		//decode(buffer: NodeBuffer) : MainController;
		//decode(buffer: ByteArrayBuffer) : MainController;
		decode64(buffer: string) : MainController;
		
	}	
}
